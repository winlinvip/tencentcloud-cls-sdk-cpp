// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logproducerconfig.proto

#include "logproducerconfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cls_config {
PROTOBUF_CONSTEXPR LogProducerConfig::LogProducerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.acceskeyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accesskeysecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compressflag_)*/true
  , /*decltype(_impl_.totalsizelnbytes_)*/uint64_t{104857600u}
  , /*decltype(_impl_.maxsendworkercount_)*/uint64_t{50u}
  , /*decltype(_impl_.maxblocksec_)*/uint64_t{60u}
  , /*decltype(_impl_.maxbatchsize_)*/uint64_t{524288u}
  , /*decltype(_impl_.lingerms_)*/uint64_t{2000u}
  , /*decltype(_impl_.retries_)*/uint64_t{10u}
  , /*decltype(_impl_.baseretrybackoffms_)*/uint64_t{100u}
  , /*decltype(_impl_.maxretrybackoffms_)*/uint64_t{50000u}
  , /*decltype(_impl_.socktimeout_)*/uint64_t{30u}
  , /*decltype(_impl_.connecttimeout_)*/uint64_t{5u}} {}
struct LogProducerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogProducerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogProducerConfigDefaultTypeInternal() {}
  union {
    LogProducerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogProducerConfigDefaultTypeInternal _LogProducerConfig_default_instance_;
}  // namespace cls_config
static ::_pb::Metadata file_level_metadata_logproducerconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_logproducerconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_logproducerconfig_2eproto = nullptr;

const uint32_t TableStruct_logproducerconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.totalsizelnbytes_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxsendworkercount_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxblocksec_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxbatchsize_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.lingerms_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.retries_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.baseretrybackoffms_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxretrybackoffms_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.compressflag_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.socktimeout_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.connecttimeout_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.acceskeyid_),
  PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.accesskeysecret_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  4,
  0,
  13,
  14,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::cls_config::LogProducerConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cls_config::_LogProducerConfig_default_instance_._instance,
};

const char descriptor_table_protodef_logproducerconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027logproducerconfig.proto\022\ncls_config\"\236\003"
  "\n\021LogProducerConfig\022#\n\020TotalSizeLnBytes\030"
  "\001 \001(\004:\t104857600\022\036\n\022MaxSendWorkerCount\030\002"
  " \001(\004:\00250\022\027\n\013MaxBlockSec\030\003 \001(\004:\00260\022\034\n\014Max"
  "BatchSize\030\004 \001(\004:\006524288\022\026\n\010LingerMs\030\005 \001("
  "\004:\0042000\022\023\n\007Retries\030\006 \001(\004:\00210\022\037\n\022BaseRetr"
  "yBackoffMs\030\007 \001(\004:\003100\022 \n\021MaxRetryBackoff"
  "Ms\030\010 \001(\004:\00550000\022\032\n\014compressflag\030\t \001(\010:\004t"
  "rue\022\016\n\006source\030\n \001(\t\022\027\n\013SockTimeout\030\013 \001(\004"
  ":\00230\022\031\n\016ConnectTimeout\030\014 \001(\004:\0015\022\020\n\010Endpo"
  "int\030\r \002(\t\022\022\n\nAccesKeyId\030\016 \002(\t\022\027\n\017AccessK"
  "eySecret\030\017 \002(\t"
  ;
static ::_pbi::once_flag descriptor_table_logproducerconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_logproducerconfig_2eproto = {
    false, false, 454, descriptor_table_protodef_logproducerconfig_2eproto,
    "logproducerconfig.proto",
    &descriptor_table_logproducerconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_logproducerconfig_2eproto::offsets,
    file_level_metadata_logproducerconfig_2eproto, file_level_enum_descriptors_logproducerconfig_2eproto,
    file_level_service_descriptors_logproducerconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_logproducerconfig_2eproto_getter() {
  return &descriptor_table_logproducerconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_logproducerconfig_2eproto(&descriptor_table_logproducerconfig_2eproto);
namespace cls_config {

// ===================================================================

class LogProducerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LogProducerConfig>()._impl_._has_bits_);
  static void set_has_totalsizelnbytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maxsendworkercount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxblocksec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_maxbatchsize(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lingerms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_baseretrybackoffms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_maxretrybackoffms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_compressflag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_socktimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_connecttimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acceskeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accesskeysecret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

LogProducerConfig::LogProducerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cls_config.LogProducerConfig)
}
LogProducerConfig::LogProducerConfig(const LogProducerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogProducerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.acceskeyid_){}
    , decltype(_impl_.accesskeysecret_){}
    , decltype(_impl_.compressflag_){}
    , decltype(_impl_.totalsizelnbytes_){}
    , decltype(_impl_.maxsendworkercount_){}
    , decltype(_impl_.maxblocksec_){}
    , decltype(_impl_.maxbatchsize_){}
    , decltype(_impl_.lingerms_){}
    , decltype(_impl_.retries_){}
    , decltype(_impl_.baseretrybackoffms_){}
    , decltype(_impl_.maxretrybackoffms_){}
    , decltype(_impl_.socktimeout_){}
    , decltype(_impl_.connecttimeout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_endpoint()) {
    _this->_impl_.endpoint_.Set(from._internal_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.acceskeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceskeyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_acceskeyid()) {
    _this->_impl_.acceskeyid_.Set(from._internal_acceskeyid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.accesskeysecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesskeysecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accesskeysecret()) {
    _this->_impl_.accesskeysecret_.Set(from._internal_accesskeysecret(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compressflag_, &from._impl_.compressflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.connecttimeout_) -
    reinterpret_cast<char*>(&_impl_.compressflag_)) + sizeof(_impl_.connecttimeout_));
  // @@protoc_insertion_point(copy_constructor:cls_config.LogProducerConfig)
}

inline void LogProducerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.acceskeyid_){}
    , decltype(_impl_.accesskeysecret_){}
    , decltype(_impl_.compressflag_){true}
    , decltype(_impl_.totalsizelnbytes_){uint64_t{104857600u}}
    , decltype(_impl_.maxsendworkercount_){uint64_t{50u}}
    , decltype(_impl_.maxblocksec_){uint64_t{60u}}
    , decltype(_impl_.maxbatchsize_){uint64_t{524288u}}
    , decltype(_impl_.lingerms_){uint64_t{2000u}}
    , decltype(_impl_.retries_){uint64_t{10u}}
    , decltype(_impl_.baseretrybackoffms_){uint64_t{100u}}
    , decltype(_impl_.maxretrybackoffms_){uint64_t{50000u}}
    , decltype(_impl_.socktimeout_){uint64_t{30u}}
    , decltype(_impl_.connecttimeout_){uint64_t{5u}}
  };
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.acceskeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceskeyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accesskeysecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesskeysecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogProducerConfig::~LogProducerConfig() {
  // @@protoc_insertion_point(destructor:cls_config.LogProducerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogProducerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_.Destroy();
  _impl_.endpoint_.Destroy();
  _impl_.acceskeyid_.Destroy();
  _impl_.accesskeysecret_.Destroy();
}

void LogProducerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogProducerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:cls_config.LogProducerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.endpoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.acceskeyid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.accesskeysecret_.ClearNonDefaultToEmpty();
    }
    _impl_.compressflag_ = true;
    _impl_.totalsizelnbytes_ = uint64_t{104857600u};
    _impl_.maxsendworkercount_ = uint64_t{50u};
    _impl_.maxblocksec_ = uint64_t{60u};
  }
  if (cached_has_bits & 0x00007f00u) {
    _impl_.maxbatchsize_ = uint64_t{524288u};
    _impl_.lingerms_ = uint64_t{2000u};
    _impl_.retries_ = uint64_t{10u};
    _impl_.baseretrybackoffms_ = uint64_t{100u};
    _impl_.maxretrybackoffms_ = uint64_t{50000u};
    _impl_.socktimeout_ = uint64_t{30u};
    _impl_.connecttimeout_ = uint64_t{5u};
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogProducerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_totalsizelnbytes(&has_bits);
          _impl_.totalsizelnbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 MaxSendWorkerCount = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maxsendworkercount(&has_bits);
          _impl_.maxsendworkercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 MaxBlockSec = 3 [default = 60];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_maxblocksec(&has_bits);
          _impl_.maxblocksec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 MaxBatchSize = 4 [default = 524288];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_maxbatchsize(&has_bits);
          _impl_.maxbatchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 LingerMs = 5 [default = 2000];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lingerms(&has_bits);
          _impl_.lingerms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Retries = 6 [default = 10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_retries(&has_bits);
          _impl_.retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_baseretrybackoffms(&has_bits);
          _impl_.baseretrybackoffms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_maxretrybackoffms(&has_bits);
          _impl_.maxretrybackoffms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool compressflag = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_compressflag(&has_bits);
          _impl_.compressflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cls_config.LogProducerConfig.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 SockTimeout = 11 [default = 30];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_socktimeout(&has_bits);
          _impl_.socktimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ConnectTimeout = 12 [default = 5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_connecttimeout(&has_bits);
          _impl_.connecttimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string Endpoint = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cls_config.LogProducerConfig.Endpoint");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string AccesKeyId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_acceskeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cls_config.LogProducerConfig.AccesKeyId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string AccessKeySecret = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_accesskeysecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cls_config.LogProducerConfig.AccessKeySecret");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogProducerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cls_config.LogProducerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_totalsizelnbytes(), target);
  }

  // optional uint64 MaxSendWorkerCount = 2 [default = 50];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_maxsendworkercount(), target);
  }

  // optional uint64 MaxBlockSec = 3 [default = 60];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_maxblocksec(), target);
  }

  // optional uint64 MaxBatchSize = 4 [default = 524288];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_maxbatchsize(), target);
  }

  // optional uint64 LingerMs = 5 [default = 2000];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lingerms(), target);
  }

  // optional uint64 Retries = 6 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_retries(), target);
  }

  // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_baseretrybackoffms(), target);
  }

  // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_maxretrybackoffms(), target);
  }

  // optional bool compressflag = 9 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_compressflag(), target);
  }

  // optional string source = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cls_config.LogProducerConfig.source");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_source(), target);
  }

  // optional uint64 SockTimeout = 11 [default = 30];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_socktimeout(), target);
  }

  // optional uint64 ConnectTimeout = 12 [default = 5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_connecttimeout(), target);
  }

  // required string Endpoint = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cls_config.LogProducerConfig.Endpoint");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_endpoint(), target);
  }

  // required string AccesKeyId = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_acceskeyid().data(), static_cast<int>(this->_internal_acceskeyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cls_config.LogProducerConfig.AccesKeyId");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_acceskeyid(), target);
  }

  // required string AccessKeySecret = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accesskeysecret().data(), static_cast<int>(this->_internal_accesskeysecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cls_config.LogProducerConfig.AccessKeySecret");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_accesskeysecret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cls_config.LogProducerConfig)
  return target;
}

size_t LogProducerConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cls_config.LogProducerConfig)
  size_t total_size = 0;

  if (_internal_has_endpoint()) {
    // required string Endpoint = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  if (_internal_has_acceskeyid()) {
    // required string AccesKeyId = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acceskeyid());
  }

  if (_internal_has_accesskeysecret()) {
    // required string AccessKeySecret = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesskeysecret());
  }

  return total_size;
}
size_t LogProducerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cls_config.LogProducerConfig)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required string Endpoint = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());

    // required string AccesKeyId = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acceskeyid());

    // required string AccessKeySecret = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesskeysecret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string source = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional bool compressflag = 9 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_totalsizelnbytes());
    }

    // optional uint64 MaxSendWorkerCount = 2 [default = 50];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_maxsendworkercount());
    }

    // optional uint64 MaxBlockSec = 3 [default = 60];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_maxblocksec());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint64 MaxBatchSize = 4 [default = 524288];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_maxbatchsize());
    }

    // optional uint64 LingerMs = 5 [default = 2000];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lingerms());
    }

    // optional uint64 Retries = 6 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_retries());
    }

    // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_baseretrybackoffms());
    }

    // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_maxretrybackoffms());
    }

    // optional uint64 SockTimeout = 11 [default = 30];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_socktimeout());
    }

    // optional uint64 ConnectTimeout = 12 [default = 5];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_connecttimeout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogProducerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogProducerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogProducerConfig::GetClassData() const { return &_class_data_; }


void LogProducerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogProducerConfig*>(&to_msg);
  auto& from = static_cast<const LogProducerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cls_config.LogProducerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_endpoint(from._internal_endpoint());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_acceskeyid(from._internal_acceskeyid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_accesskeysecret(from._internal_accesskeysecret());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.compressflag_ = from._impl_.compressflag_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.totalsizelnbytes_ = from._impl_.totalsizelnbytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.maxsendworkercount_ = from._impl_.maxsendworkercount_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.maxblocksec_ = from._impl_.maxblocksec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.maxbatchsize_ = from._impl_.maxbatchsize_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lingerms_ = from._impl_.lingerms_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.retries_ = from._impl_.retries_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.baseretrybackoffms_ = from._impl_.baseretrybackoffms_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.maxretrybackoffms_ = from._impl_.maxretrybackoffms_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.socktimeout_ = from._impl_.socktimeout_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.connecttimeout_ = from._impl_.connecttimeout_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogProducerConfig::CopyFrom(const LogProducerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cls_config.LogProducerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogProducerConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LogProducerConfig::InternalSwap(LogProducerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endpoint_, lhs_arena,
      &other->_impl_.endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.acceskeyid_, lhs_arena,
      &other->_impl_.acceskeyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesskeysecret_, lhs_arena,
      &other->_impl_.accesskeysecret_, rhs_arena
  );
  swap(_impl_.compressflag_, other->_impl_.compressflag_);
  swap(_impl_.totalsizelnbytes_, other->_impl_.totalsizelnbytes_);
  swap(_impl_.maxsendworkercount_, other->_impl_.maxsendworkercount_);
  swap(_impl_.maxblocksec_, other->_impl_.maxblocksec_);
  swap(_impl_.maxbatchsize_, other->_impl_.maxbatchsize_);
  swap(_impl_.lingerms_, other->_impl_.lingerms_);
  swap(_impl_.retries_, other->_impl_.retries_);
  swap(_impl_.baseretrybackoffms_, other->_impl_.baseretrybackoffms_);
  swap(_impl_.maxretrybackoffms_, other->_impl_.maxretrybackoffms_);
  swap(_impl_.socktimeout_, other->_impl_.socktimeout_);
  swap(_impl_.connecttimeout_, other->_impl_.connecttimeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogProducerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_logproducerconfig_2eproto_getter, &descriptor_table_logproducerconfig_2eproto_once,
      file_level_metadata_logproducerconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cls_config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cls_config::LogProducerConfig*
Arena::CreateMaybeMessage< ::cls_config::LogProducerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cls_config::LogProducerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
