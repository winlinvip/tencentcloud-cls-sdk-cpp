// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cls_logs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cls_5flogs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cls_5flogs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cls_5flogs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cls_5flogs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cls_5flogs_2eproto;
namespace cls {
class Log;
struct LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class LogGroup;
struct LogGroupDefaultTypeInternal;
extern LogGroupDefaultTypeInternal _LogGroup_default_instance_;
class LogGroupList;
struct LogGroupListDefaultTypeInternal;
extern LogGroupListDefaultTypeInternal _LogGroupList_default_instance_;
class LogTag;
struct LogTagDefaultTypeInternal;
extern LogTagDefaultTypeInternal _LogTag_default_instance_;
class Log_Content;
struct Log_ContentDefaultTypeInternal;
extern Log_ContentDefaultTypeInternal _Log_Content_default_instance_;
}  // namespace cls
PROTOBUF_NAMESPACE_OPEN
template<> ::cls::Log* Arena::CreateMaybeMessage<::cls::Log>(Arena*);
template<> ::cls::LogGroup* Arena::CreateMaybeMessage<::cls::LogGroup>(Arena*);
template<> ::cls::LogGroupList* Arena::CreateMaybeMessage<::cls::LogGroupList>(Arena*);
template<> ::cls::LogTag* Arena::CreateMaybeMessage<::cls::LogTag>(Arena*);
template<> ::cls::Log_Content* Arena::CreateMaybeMessage<::cls::Log_Content>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cls {

// ===================================================================

class Log_Content final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cls.Log.Content) */ {
 public:
  inline Log_Content() : Log_Content(nullptr) {}
  ~Log_Content() override;
  explicit PROTOBUF_CONSTEXPR Log_Content(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Log_Content(const Log_Content& from);
  Log_Content(Log_Content&& from) noexcept
    : Log_Content() {
    *this = ::std::move(from);
  }

  inline Log_Content& operator=(const Log_Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log_Content& operator=(Log_Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log_Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log_Content* internal_default_instance() {
    return reinterpret_cast<const Log_Content*>(
               &_Log_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Log_Content& a, Log_Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Log_Content* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log_Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log_Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Log_Content>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Log_Content& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Log_Content& from) {
    Log_Content::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log_Content* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cls.Log.Content";
  }
  protected:
  explicit Log_Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:cls.Log.Content)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class Log final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cls.Log) */ {
 public:
  inline Log() : Log(nullptr) {}
  ~Log() override;
  explicit PROTOBUF_CONSTEXPR Log(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Log& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Log& from) {
    Log::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cls.Log";
  }
  protected:
  explicit Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Log_Content Content;

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .cls.Log.Content contents = 2;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::cls::Log_Content* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log_Content >*
      mutable_contents();
  private:
  const ::cls::Log_Content& _internal_contents(int index) const;
  ::cls::Log_Content* _internal_add_contents();
  public:
  const ::cls::Log_Content& contents(int index) const;
  ::cls::Log_Content* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log_Content >&
      contents() const;

  // required int64 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cls.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log_Content > contents_;
    int64_t time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class LogTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cls.LogTag) */ {
 public:
  inline LogTag() : LogTag(nullptr) {}
  ~LogTag() override;
  explicit PROTOBUF_CONSTEXPR LogTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogTag(const LogTag& from);
  LogTag(LogTag&& from) noexcept
    : LogTag() {
    *this = ::std::move(from);
  }

  inline LogTag& operator=(const LogTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogTag& operator=(LogTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogTag* internal_default_instance() {
    return reinterpret_cast<const LogTag*>(
               &_LogTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogTag& a, LogTag& b) {
    a.Swap(&b);
  }
  inline void Swap(LogTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogTag& from) {
    LogTag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cls.LogTag";
  }
  protected:
  explicit LogTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:cls.LogTag)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class LogGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cls.LogGroup) */ {
 public:
  inline LogGroup() : LogGroup(nullptr) {}
  ~LogGroup() override;
  explicit PROTOBUF_CONSTEXPR LogGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogGroup(const LogGroup& from);
  LogGroup(LogGroup&& from) noexcept
    : LogGroup() {
    *this = ::std::move(from);
  }

  inline LogGroup& operator=(const LogGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGroup& operator=(LogGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGroup* internal_default_instance() {
    return reinterpret_cast<const LogGroup*>(
               &_LogGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogGroup& a, LogGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogGroup& from) {
    LogGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cls.LogGroup";
  }
  protected:
  explicit LogGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
    kLogTagsFieldNumber = 5,
    kContextFlowFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kSourceFieldNumber = 4,
  };
  // repeated .cls.Log logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::cls::Log* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log >*
      mutable_logs();
  private:
  const ::cls::Log& _internal_logs(int index) const;
  ::cls::Log* _internal_add_logs();
  public:
  const ::cls::Log& logs(int index) const;
  ::cls::Log* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log >&
      logs() const;

  // repeated .cls.LogTag logTags = 5;
  int logtags_size() const;
  private:
  int _internal_logtags_size() const;
  public:
  void clear_logtags();
  ::cls::LogTag* mutable_logtags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogTag >*
      mutable_logtags();
  private:
  const ::cls::LogTag& _internal_logtags(int index) const;
  ::cls::LogTag* _internal_add_logtags();
  public:
  const ::cls::LogTag& logtags(int index) const;
  ::cls::LogTag* add_logtags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogTag >&
      logtags() const;

  // optional string contextFlow = 2;
  bool has_contextflow() const;
  private:
  bool _internal_has_contextflow() const;
  public:
  void clear_contextflow();
  const std::string& contextflow() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contextflow(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contextflow();
  PROTOBUF_NODISCARD std::string* release_contextflow();
  void set_allocated_contextflow(std::string* contextflow);
  private:
  const std::string& _internal_contextflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contextflow(const std::string& value);
  std::string* _internal_mutable_contextflow();
  public:

  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // @@protoc_insertion_point(class_scope:cls.LogGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log > logs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogTag > logtags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contextflow_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cls_5flogs_2eproto;
};
// -------------------------------------------------------------------

class LogGroupList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cls.LogGroupList) */ {
 public:
  inline LogGroupList() : LogGroupList(nullptr) {}
  ~LogGroupList() override;
  explicit PROTOBUF_CONSTEXPR LogGroupList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogGroupList(const LogGroupList& from);
  LogGroupList(LogGroupList&& from) noexcept
    : LogGroupList() {
    *this = ::std::move(from);
  }

  inline LogGroupList& operator=(const LogGroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGroupList& operator=(LogGroupList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGroupList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGroupList* internal_default_instance() {
    return reinterpret_cast<const LogGroupList*>(
               &_LogGroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogGroupList& a, LogGroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGroupList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGroupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGroupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogGroupList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogGroupList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogGroupList& from) {
    LogGroupList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGroupList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cls.LogGroupList";
  }
  protected:
  explicit LogGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogGroupListFieldNumber = 1,
  };
  // repeated .cls.LogGroup logGroupList = 1;
  int loggrouplist_size() const;
  private:
  int _internal_loggrouplist_size() const;
  public:
  void clear_loggrouplist();
  ::cls::LogGroup* mutable_loggrouplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogGroup >*
      mutable_loggrouplist();
  private:
  const ::cls::LogGroup& _internal_loggrouplist(int index) const;
  ::cls::LogGroup* _internal_add_loggrouplist();
  public:
  const ::cls::LogGroup& loggrouplist(int index) const;
  ::cls::LogGroup* add_loggrouplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogGroup >&
      loggrouplist() const;

  // @@protoc_insertion_point(class_scope:cls.LogGroupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogGroup > loggrouplist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cls_5flogs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Log_Content

// required string key = 1;
inline bool Log_Content::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Log_Content::has_key() const {
  return _internal_has_key();
}
inline void Log_Content::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Log_Content::key() const {
  // @@protoc_insertion_point(field_get:cls.Log.Content.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Log_Content::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls.Log.Content.key)
}
inline std::string* Log_Content::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cls.Log.Content.key)
  return _s;
}
inline const std::string& Log_Content::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Log_Content::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Log_Content::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Log_Content::release_key() {
  // @@protoc_insertion_point(field_release:cls.Log.Content.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Log_Content::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls.Log.Content.key)
}

// required string value = 2;
inline bool Log_Content::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Log_Content::has_value() const {
  return _internal_has_value();
}
inline void Log_Content::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Log_Content::value() const {
  // @@protoc_insertion_point(field_get:cls.Log.Content.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Log_Content::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls.Log.Content.value)
}
inline std::string* Log_Content::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cls.Log.Content.value)
  return _s;
}
inline const std::string& Log_Content::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Log_Content::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Log_Content::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Log_Content::release_value() {
  // @@protoc_insertion_point(field_release:cls.Log.Content.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Log_Content::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls.Log.Content.value)
}

// -------------------------------------------------------------------

// Log

// required int64 time = 1;
inline bool Log::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Log::has_time() const {
  return _internal_has_time();
}
inline void Log::clear_time() {
  _impl_.time_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t Log::_internal_time() const {
  return _impl_.time_;
}
inline int64_t Log::time() const {
  // @@protoc_insertion_point(field_get:cls.Log.time)
  return _internal_time();
}
inline void Log::_internal_set_time(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}
inline void Log::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cls.Log.time)
}

// repeated .cls.Log.Content contents = 2;
inline int Log::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int Log::contents_size() const {
  return _internal_contents_size();
}
inline void Log::clear_contents() {
  _impl_.contents_.Clear();
}
inline ::cls::Log_Content* Log::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:cls.Log.contents)
  return _impl_.contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log_Content >*
Log::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:cls.Log.contents)
  return &_impl_.contents_;
}
inline const ::cls::Log_Content& Log::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const ::cls::Log_Content& Log::contents(int index) const {
  // @@protoc_insertion_point(field_get:cls.Log.contents)
  return _internal_contents(index);
}
inline ::cls::Log_Content* Log::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline ::cls::Log_Content* Log::add_contents() {
  ::cls::Log_Content* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:cls.Log.contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log_Content >&
Log::contents() const {
  // @@protoc_insertion_point(field_list:cls.Log.contents)
  return _impl_.contents_;
}

// -------------------------------------------------------------------

// LogTag

// required string key = 1;
inline bool LogTag::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogTag::has_key() const {
  return _internal_has_key();
}
inline void LogTag::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogTag::key() const {
  // @@protoc_insertion_point(field_get:cls.LogTag.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogTag::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls.LogTag.key)
}
inline std::string* LogTag::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cls.LogTag.key)
  return _s;
}
inline const std::string& LogTag::_internal_key() const {
  return _impl_.key_.Get();
}
inline void LogTag::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* LogTag::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* LogTag::release_key() {
  // @@protoc_insertion_point(field_release:cls.LogTag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls.LogTag.key)
}

// required string value = 2;
inline bool LogTag::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogTag::has_value() const {
  return _internal_has_value();
}
inline void LogTag::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogTag::value() const {
  // @@protoc_insertion_point(field_get:cls.LogTag.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogTag::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls.LogTag.value)
}
inline std::string* LogTag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cls.LogTag.value)
  return _s;
}
inline const std::string& LogTag::_internal_value() const {
  return _impl_.value_.Get();
}
inline void LogTag::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* LogTag::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* LogTag::release_value() {
  // @@protoc_insertion_point(field_release:cls.LogTag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls.LogTag.value)
}

// -------------------------------------------------------------------

// LogGroup

// repeated .cls.Log logs = 1;
inline int LogGroup::_internal_logs_size() const {
  return _impl_.logs_.size();
}
inline int LogGroup::logs_size() const {
  return _internal_logs_size();
}
inline void LogGroup::clear_logs() {
  _impl_.logs_.Clear();
}
inline ::cls::Log* LogGroup::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.logs)
  return _impl_.logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log >*
LogGroup::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:cls.LogGroup.logs)
  return &_impl_.logs_;
}
inline const ::cls::Log& LogGroup::_internal_logs(int index) const {
  return _impl_.logs_.Get(index);
}
inline const ::cls::Log& LogGroup::logs(int index) const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.logs)
  return _internal_logs(index);
}
inline ::cls::Log* LogGroup::_internal_add_logs() {
  return _impl_.logs_.Add();
}
inline ::cls::Log* LogGroup::add_logs() {
  ::cls::Log* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:cls.LogGroup.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::Log >&
LogGroup::logs() const {
  // @@protoc_insertion_point(field_list:cls.LogGroup.logs)
  return _impl_.logs_;
}

// optional string contextFlow = 2;
inline bool LogGroup::_internal_has_contextflow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogGroup::has_contextflow() const {
  return _internal_has_contextflow();
}
inline void LogGroup::clear_contextflow() {
  _impl_.contextflow_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogGroup::contextflow() const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.contextFlow)
  return _internal_contextflow();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_contextflow(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.contextflow_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls.LogGroup.contextFlow)
}
inline std::string* LogGroup::mutable_contextflow() {
  std::string* _s = _internal_mutable_contextflow();
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.contextFlow)
  return _s;
}
inline const std::string& LogGroup::_internal_contextflow() const {
  return _impl_.contextflow_.Get();
}
inline void LogGroup::_internal_set_contextflow(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.contextflow_.Set(value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_contextflow() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.contextflow_.Mutable(GetArenaForAllocation());
}
inline std::string* LogGroup::release_contextflow() {
  // @@protoc_insertion_point(field_release:cls.LogGroup.contextFlow)
  if (!_internal_has_contextflow()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.contextflow_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contextflow_.IsDefault()) {
    _impl_.contextflow_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogGroup::set_allocated_contextflow(std::string* contextflow) {
  if (contextflow != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contextflow_.SetAllocated(contextflow, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contextflow_.IsDefault()) {
    _impl_.contextflow_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls.LogGroup.contextFlow)
}

// optional string filename = 3;
inline bool LogGroup::_internal_has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogGroup::has_filename() const {
  return _internal_has_filename();
}
inline void LogGroup::clear_filename() {
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogGroup::filename() const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls.LogGroup.filename)
}
inline std::string* LogGroup::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.filename)
  return _s;
}
inline const std::string& LogGroup::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void LogGroup::_internal_set_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_filename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* LogGroup::release_filename() {
  // @@protoc_insertion_point(field_release:cls.LogGroup.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogGroup::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls.LogGroup.filename)
}

// optional string source = 4;
inline bool LogGroup::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogGroup::has_source() const {
  return _internal_has_source();
}
inline void LogGroup::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogGroup::source() const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls.LogGroup.source)
}
inline std::string* LogGroup::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.source)
  return _s;
}
inline const std::string& LogGroup::_internal_source() const {
  return _impl_.source_.Get();
}
inline void LogGroup::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* LogGroup::release_source() {
  // @@protoc_insertion_point(field_release:cls.LogGroup.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogGroup::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls.LogGroup.source)
}

// repeated .cls.LogTag logTags = 5;
inline int LogGroup::_internal_logtags_size() const {
  return _impl_.logtags_.size();
}
inline int LogGroup::logtags_size() const {
  return _internal_logtags_size();
}
inline void LogGroup::clear_logtags() {
  _impl_.logtags_.Clear();
}
inline ::cls::LogTag* LogGroup::mutable_logtags(int index) {
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.logTags)
  return _impl_.logtags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogTag >*
LogGroup::mutable_logtags() {
  // @@protoc_insertion_point(field_mutable_list:cls.LogGroup.logTags)
  return &_impl_.logtags_;
}
inline const ::cls::LogTag& LogGroup::_internal_logtags(int index) const {
  return _impl_.logtags_.Get(index);
}
inline const ::cls::LogTag& LogGroup::logtags(int index) const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.logTags)
  return _internal_logtags(index);
}
inline ::cls::LogTag* LogGroup::_internal_add_logtags() {
  return _impl_.logtags_.Add();
}
inline ::cls::LogTag* LogGroup::add_logtags() {
  ::cls::LogTag* _add = _internal_add_logtags();
  // @@protoc_insertion_point(field_add:cls.LogGroup.logTags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogTag >&
LogGroup::logtags() const {
  // @@protoc_insertion_point(field_list:cls.LogGroup.logTags)
  return _impl_.logtags_;
}

// -------------------------------------------------------------------

// LogGroupList

// repeated .cls.LogGroup logGroupList = 1;
inline int LogGroupList::_internal_loggrouplist_size() const {
  return _impl_.loggrouplist_.size();
}
inline int LogGroupList::loggrouplist_size() const {
  return _internal_loggrouplist_size();
}
inline void LogGroupList::clear_loggrouplist() {
  _impl_.loggrouplist_.Clear();
}
inline ::cls::LogGroup* LogGroupList::mutable_loggrouplist(int index) {
  // @@protoc_insertion_point(field_mutable:cls.LogGroupList.logGroupList)
  return _impl_.loggrouplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogGroup >*
LogGroupList::mutable_loggrouplist() {
  // @@protoc_insertion_point(field_mutable_list:cls.LogGroupList.logGroupList)
  return &_impl_.loggrouplist_;
}
inline const ::cls::LogGroup& LogGroupList::_internal_loggrouplist(int index) const {
  return _impl_.loggrouplist_.Get(index);
}
inline const ::cls::LogGroup& LogGroupList::loggrouplist(int index) const {
  // @@protoc_insertion_point(field_get:cls.LogGroupList.logGroupList)
  return _internal_loggrouplist(index);
}
inline ::cls::LogGroup* LogGroupList::_internal_add_loggrouplist() {
  return _impl_.loggrouplist_.Add();
}
inline ::cls::LogGroup* LogGroupList::add_loggrouplist() {
  ::cls::LogGroup* _add = _internal_add_loggrouplist();
  // @@protoc_insertion_point(field_add:cls.LogGroupList.logGroupList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cls::LogGroup >&
LogGroupList::loggrouplist() const {
  // @@protoc_insertion_point(field_list:cls.LogGroupList.logGroupList)
  return _impl_.loggrouplist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cls

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cls_5flogs_2eproto
