// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logproducerconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logproducerconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logproducerconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logproducerconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logproducerconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logproducerconfig_2eproto;
namespace cls_config {
class LogProducerConfig;
struct LogProducerConfigDefaultTypeInternal;
extern LogProducerConfigDefaultTypeInternal _LogProducerConfig_default_instance_;
}  // namespace cls_config
PROTOBUF_NAMESPACE_OPEN
template<> ::cls_config::LogProducerConfig* Arena::CreateMaybeMessage<::cls_config::LogProducerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cls_config {

// ===================================================================

class LogProducerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cls_config.LogProducerConfig) */ {
 public:
  inline LogProducerConfig() : LogProducerConfig(nullptr) {}
  ~LogProducerConfig() override;
  explicit PROTOBUF_CONSTEXPR LogProducerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogProducerConfig(const LogProducerConfig& from);
  LogProducerConfig(LogProducerConfig&& from) noexcept
    : LogProducerConfig() {
    *this = ::std::move(from);
  }

  inline LogProducerConfig& operator=(const LogProducerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogProducerConfig& operator=(LogProducerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogProducerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogProducerConfig* internal_default_instance() {
    return reinterpret_cast<const LogProducerConfig*>(
               &_LogProducerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogProducerConfig& a, LogProducerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LogProducerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogProducerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogProducerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogProducerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogProducerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogProducerConfig& from) {
    LogProducerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogProducerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cls_config.LogProducerConfig";
  }
  protected:
  explicit LogProducerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 10,
    kEndpointFieldNumber = 13,
    kAccesKeyIdFieldNumber = 14,
    kAccessKeySecretFieldNumber = 15,
    kCompressflagFieldNumber = 9,
    kTotalSizeLnBytesFieldNumber = 1,
    kMaxSendWorkerCountFieldNumber = 2,
    kMaxBlockSecFieldNumber = 3,
    kMaxBatchSizeFieldNumber = 4,
    kLingerMsFieldNumber = 5,
    kRetriesFieldNumber = 6,
    kBaseRetryBackoffMsFieldNumber = 7,
    kMaxRetryBackoffMsFieldNumber = 8,
    kSockTimeoutFieldNumber = 11,
    kConnectTimeoutFieldNumber = 12,
  };
  // optional string source = 10;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // required string Endpoint = 13;
  bool has_endpoint() const;
  private:
  bool _internal_has_endpoint() const;
  public:
  void clear_endpoint();
  const std::string& endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // required string AccesKeyId = 14;
  bool has_acceskeyid() const;
  private:
  bool _internal_has_acceskeyid() const;
  public:
  void clear_acceskeyid();
  const std::string& acceskeyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceskeyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceskeyid();
  PROTOBUF_NODISCARD std::string* release_acceskeyid();
  void set_allocated_acceskeyid(std::string* acceskeyid);
  private:
  const std::string& _internal_acceskeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceskeyid(const std::string& value);
  std::string* _internal_mutable_acceskeyid();
  public:

  // required string AccessKeySecret = 15;
  bool has_accesskeysecret() const;
  private:
  bool _internal_has_accesskeysecret() const;
  public:
  void clear_accesskeysecret();
  const std::string& accesskeysecret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesskeysecret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesskeysecret();
  PROTOBUF_NODISCARD std::string* release_accesskeysecret();
  void set_allocated_accesskeysecret(std::string* accesskeysecret);
  private:
  const std::string& _internal_accesskeysecret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesskeysecret(const std::string& value);
  std::string* _internal_mutable_accesskeysecret();
  public:

  // optional bool compressflag = 9 [default = true];
  bool has_compressflag() const;
  private:
  bool _internal_has_compressflag() const;
  public:
  void clear_compressflag();
  bool compressflag() const;
  void set_compressflag(bool value);
  private:
  bool _internal_compressflag() const;
  void _internal_set_compressflag(bool value);
  public:

  // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
  bool has_totalsizelnbytes() const;
  private:
  bool _internal_has_totalsizelnbytes() const;
  public:
  void clear_totalsizelnbytes();
  uint64_t totalsizelnbytes() const;
  void set_totalsizelnbytes(uint64_t value);
  private:
  uint64_t _internal_totalsizelnbytes() const;
  void _internal_set_totalsizelnbytes(uint64_t value);
  public:

  // optional uint64 MaxSendWorkerCount = 2 [default = 50];
  bool has_maxsendworkercount() const;
  private:
  bool _internal_has_maxsendworkercount() const;
  public:
  void clear_maxsendworkercount();
  uint64_t maxsendworkercount() const;
  void set_maxsendworkercount(uint64_t value);
  private:
  uint64_t _internal_maxsendworkercount() const;
  void _internal_set_maxsendworkercount(uint64_t value);
  public:

  // optional uint64 MaxBlockSec = 3 [default = 60];
  bool has_maxblocksec() const;
  private:
  bool _internal_has_maxblocksec() const;
  public:
  void clear_maxblocksec();
  uint64_t maxblocksec() const;
  void set_maxblocksec(uint64_t value);
  private:
  uint64_t _internal_maxblocksec() const;
  void _internal_set_maxblocksec(uint64_t value);
  public:

  // optional uint64 MaxBatchSize = 4 [default = 524288];
  bool has_maxbatchsize() const;
  private:
  bool _internal_has_maxbatchsize() const;
  public:
  void clear_maxbatchsize();
  uint64_t maxbatchsize() const;
  void set_maxbatchsize(uint64_t value);
  private:
  uint64_t _internal_maxbatchsize() const;
  void _internal_set_maxbatchsize(uint64_t value);
  public:

  // optional uint64 LingerMs = 5 [default = 2000];
  bool has_lingerms() const;
  private:
  bool _internal_has_lingerms() const;
  public:
  void clear_lingerms();
  uint64_t lingerms() const;
  void set_lingerms(uint64_t value);
  private:
  uint64_t _internal_lingerms() const;
  void _internal_set_lingerms(uint64_t value);
  public:

  // optional uint64 Retries = 6 [default = 10];
  bool has_retries() const;
  private:
  bool _internal_has_retries() const;
  public:
  void clear_retries();
  uint64_t retries() const;
  void set_retries(uint64_t value);
  private:
  uint64_t _internal_retries() const;
  void _internal_set_retries(uint64_t value);
  public:

  // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
  bool has_baseretrybackoffms() const;
  private:
  bool _internal_has_baseretrybackoffms() const;
  public:
  void clear_baseretrybackoffms();
  uint64_t baseretrybackoffms() const;
  void set_baseretrybackoffms(uint64_t value);
  private:
  uint64_t _internal_baseretrybackoffms() const;
  void _internal_set_baseretrybackoffms(uint64_t value);
  public:

  // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
  bool has_maxretrybackoffms() const;
  private:
  bool _internal_has_maxretrybackoffms() const;
  public:
  void clear_maxretrybackoffms();
  uint64_t maxretrybackoffms() const;
  void set_maxretrybackoffms(uint64_t value);
  private:
  uint64_t _internal_maxretrybackoffms() const;
  void _internal_set_maxretrybackoffms(uint64_t value);
  public:

  // optional uint64 SockTimeout = 11 [default = 30];
  bool has_socktimeout() const;
  private:
  bool _internal_has_socktimeout() const;
  public:
  void clear_socktimeout();
  uint64_t socktimeout() const;
  void set_socktimeout(uint64_t value);
  private:
  uint64_t _internal_socktimeout() const;
  void _internal_set_socktimeout(uint64_t value);
  public:

  // optional uint64 ConnectTimeout = 12 [default = 5];
  bool has_connecttimeout() const;
  private:
  bool _internal_has_connecttimeout() const;
  public:
  void clear_connecttimeout();
  uint64_t connecttimeout() const;
  void set_connecttimeout(uint64_t value);
  private:
  uint64_t _internal_connecttimeout() const;
  void _internal_set_connecttimeout(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cls_config.LogProducerConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceskeyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesskeysecret_;
    bool compressflag_;
    uint64_t totalsizelnbytes_;
    uint64_t maxsendworkercount_;
    uint64_t maxblocksec_;
    uint64_t maxbatchsize_;
    uint64_t lingerms_;
    uint64_t retries_;
    uint64_t baseretrybackoffms_;
    uint64_t maxretrybackoffms_;
    uint64_t socktimeout_;
    uint64_t connecttimeout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_logproducerconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogProducerConfig

// optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
inline bool LogProducerConfig::_internal_has_totalsizelnbytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LogProducerConfig::has_totalsizelnbytes() const {
  return _internal_has_totalsizelnbytes();
}
inline void LogProducerConfig::clear_totalsizelnbytes() {
  _impl_.totalsizelnbytes_ = uint64_t{104857600u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t LogProducerConfig::_internal_totalsizelnbytes() const {
  return _impl_.totalsizelnbytes_;
}
inline uint64_t LogProducerConfig::totalsizelnbytes() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.TotalSizeLnBytes)
  return _internal_totalsizelnbytes();
}
inline void LogProducerConfig::_internal_set_totalsizelnbytes(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.totalsizelnbytes_ = value;
}
inline void LogProducerConfig::set_totalsizelnbytes(uint64_t value) {
  _internal_set_totalsizelnbytes(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.TotalSizeLnBytes)
}

// optional uint64 MaxSendWorkerCount = 2 [default = 50];
inline bool LogProducerConfig::_internal_has_maxsendworkercount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LogProducerConfig::has_maxsendworkercount() const {
  return _internal_has_maxsendworkercount();
}
inline void LogProducerConfig::clear_maxsendworkercount() {
  _impl_.maxsendworkercount_ = uint64_t{50u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t LogProducerConfig::_internal_maxsendworkercount() const {
  return _impl_.maxsendworkercount_;
}
inline uint64_t LogProducerConfig::maxsendworkercount() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxSendWorkerCount)
  return _internal_maxsendworkercount();
}
inline void LogProducerConfig::_internal_set_maxsendworkercount(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.maxsendworkercount_ = value;
}
inline void LogProducerConfig::set_maxsendworkercount(uint64_t value) {
  _internal_set_maxsendworkercount(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxSendWorkerCount)
}

// optional uint64 MaxBlockSec = 3 [default = 60];
inline bool LogProducerConfig::_internal_has_maxblocksec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LogProducerConfig::has_maxblocksec() const {
  return _internal_has_maxblocksec();
}
inline void LogProducerConfig::clear_maxblocksec() {
  _impl_.maxblocksec_ = uint64_t{60u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t LogProducerConfig::_internal_maxblocksec() const {
  return _impl_.maxblocksec_;
}
inline uint64_t LogProducerConfig::maxblocksec() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxBlockSec)
  return _internal_maxblocksec();
}
inline void LogProducerConfig::_internal_set_maxblocksec(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.maxblocksec_ = value;
}
inline void LogProducerConfig::set_maxblocksec(uint64_t value) {
  _internal_set_maxblocksec(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxBlockSec)
}

// optional uint64 MaxBatchSize = 4 [default = 524288];
inline bool LogProducerConfig::_internal_has_maxbatchsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LogProducerConfig::has_maxbatchsize() const {
  return _internal_has_maxbatchsize();
}
inline void LogProducerConfig::clear_maxbatchsize() {
  _impl_.maxbatchsize_ = uint64_t{524288u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t LogProducerConfig::_internal_maxbatchsize() const {
  return _impl_.maxbatchsize_;
}
inline uint64_t LogProducerConfig::maxbatchsize() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxBatchSize)
  return _internal_maxbatchsize();
}
inline void LogProducerConfig::_internal_set_maxbatchsize(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.maxbatchsize_ = value;
}
inline void LogProducerConfig::set_maxbatchsize(uint64_t value) {
  _internal_set_maxbatchsize(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxBatchSize)
}

// optional uint64 LingerMs = 5 [default = 2000];
inline bool LogProducerConfig::_internal_has_lingerms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LogProducerConfig::has_lingerms() const {
  return _internal_has_lingerms();
}
inline void LogProducerConfig::clear_lingerms() {
  _impl_.lingerms_ = uint64_t{2000u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t LogProducerConfig::_internal_lingerms() const {
  return _impl_.lingerms_;
}
inline uint64_t LogProducerConfig::lingerms() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.LingerMs)
  return _internal_lingerms();
}
inline void LogProducerConfig::_internal_set_lingerms(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lingerms_ = value;
}
inline void LogProducerConfig::set_lingerms(uint64_t value) {
  _internal_set_lingerms(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.LingerMs)
}

// optional uint64 Retries = 6 [default = 10];
inline bool LogProducerConfig::_internal_has_retries() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LogProducerConfig::has_retries() const {
  return _internal_has_retries();
}
inline void LogProducerConfig::clear_retries() {
  _impl_.retries_ = uint64_t{10u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t LogProducerConfig::_internal_retries() const {
  return _impl_.retries_;
}
inline uint64_t LogProducerConfig::retries() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.Retries)
  return _internal_retries();
}
inline void LogProducerConfig::_internal_set_retries(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.retries_ = value;
}
inline void LogProducerConfig::set_retries(uint64_t value) {
  _internal_set_retries(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.Retries)
}

// optional uint64 BaseRetryBackoffMs = 7 [default = 100];
inline bool LogProducerConfig::_internal_has_baseretrybackoffms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LogProducerConfig::has_baseretrybackoffms() const {
  return _internal_has_baseretrybackoffms();
}
inline void LogProducerConfig::clear_baseretrybackoffms() {
  _impl_.baseretrybackoffms_ = uint64_t{100u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t LogProducerConfig::_internal_baseretrybackoffms() const {
  return _impl_.baseretrybackoffms_;
}
inline uint64_t LogProducerConfig::baseretrybackoffms() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.BaseRetryBackoffMs)
  return _internal_baseretrybackoffms();
}
inline void LogProducerConfig::_internal_set_baseretrybackoffms(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.baseretrybackoffms_ = value;
}
inline void LogProducerConfig::set_baseretrybackoffms(uint64_t value) {
  _internal_set_baseretrybackoffms(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.BaseRetryBackoffMs)
}

// optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
inline bool LogProducerConfig::_internal_has_maxretrybackoffms() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LogProducerConfig::has_maxretrybackoffms() const {
  return _internal_has_maxretrybackoffms();
}
inline void LogProducerConfig::clear_maxretrybackoffms() {
  _impl_.maxretrybackoffms_ = uint64_t{50000u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t LogProducerConfig::_internal_maxretrybackoffms() const {
  return _impl_.maxretrybackoffms_;
}
inline uint64_t LogProducerConfig::maxretrybackoffms() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxRetryBackoffMs)
  return _internal_maxretrybackoffms();
}
inline void LogProducerConfig::_internal_set_maxretrybackoffms(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.maxretrybackoffms_ = value;
}
inline void LogProducerConfig::set_maxretrybackoffms(uint64_t value) {
  _internal_set_maxretrybackoffms(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxRetryBackoffMs)
}

// optional bool compressflag = 9 [default = true];
inline bool LogProducerConfig::_internal_has_compressflag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogProducerConfig::has_compressflag() const {
  return _internal_has_compressflag();
}
inline void LogProducerConfig::clear_compressflag() {
  _impl_.compressflag_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool LogProducerConfig::_internal_compressflag() const {
  return _impl_.compressflag_;
}
inline bool LogProducerConfig::compressflag() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.compressflag)
  return _internal_compressflag();
}
inline void LogProducerConfig::_internal_set_compressflag(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.compressflag_ = value;
}
inline void LogProducerConfig::set_compressflag(bool value) {
  _internal_set_compressflag(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.compressflag)
}

// optional string source = 10;
inline bool LogProducerConfig::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogProducerConfig::has_source() const {
  return _internal_has_source();
}
inline void LogProducerConfig::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogProducerConfig::source() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogProducerConfig::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.source)
}
inline std::string* LogProducerConfig::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.source)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_source() const {
  return _impl_.source_.Get();
}
inline void LogProducerConfig::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* LogProducerConfig::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* LogProducerConfig::release_source() {
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogProducerConfig::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.source)
}

// optional uint64 SockTimeout = 11 [default = 30];
inline bool LogProducerConfig::_internal_has_socktimeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LogProducerConfig::has_socktimeout() const {
  return _internal_has_socktimeout();
}
inline void LogProducerConfig::clear_socktimeout() {
  _impl_.socktimeout_ = uint64_t{30u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t LogProducerConfig::_internal_socktimeout() const {
  return _impl_.socktimeout_;
}
inline uint64_t LogProducerConfig::socktimeout() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.SockTimeout)
  return _internal_socktimeout();
}
inline void LogProducerConfig::_internal_set_socktimeout(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.socktimeout_ = value;
}
inline void LogProducerConfig::set_socktimeout(uint64_t value) {
  _internal_set_socktimeout(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.SockTimeout)
}

// optional uint64 ConnectTimeout = 12 [default = 5];
inline bool LogProducerConfig::_internal_has_connecttimeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LogProducerConfig::has_connecttimeout() const {
  return _internal_has_connecttimeout();
}
inline void LogProducerConfig::clear_connecttimeout() {
  _impl_.connecttimeout_ = uint64_t{5u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint64_t LogProducerConfig::_internal_connecttimeout() const {
  return _impl_.connecttimeout_;
}
inline uint64_t LogProducerConfig::connecttimeout() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.ConnectTimeout)
  return _internal_connecttimeout();
}
inline void LogProducerConfig::_internal_set_connecttimeout(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.connecttimeout_ = value;
}
inline void LogProducerConfig::set_connecttimeout(uint64_t value) {
  _internal_set_connecttimeout(value);
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.ConnectTimeout)
}

// required string Endpoint = 13;
inline bool LogProducerConfig::_internal_has_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogProducerConfig::has_endpoint() const {
  return _internal_has_endpoint();
}
inline void LogProducerConfig::clear_endpoint() {
  _impl_.endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogProducerConfig::endpoint() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.Endpoint)
  return _internal_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogProducerConfig::set_endpoint(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.Endpoint)
}
inline std::string* LogProducerConfig::mutable_endpoint() {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.Endpoint)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_endpoint() const {
  return _impl_.endpoint_.Get();
}
inline void LogProducerConfig::_internal_set_endpoint(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* LogProducerConfig::_internal_mutable_endpoint() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* LogProducerConfig::release_endpoint() {
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.Endpoint)
  if (!_internal_has_endpoint()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.endpoint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endpoint_.IsDefault()) {
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogProducerConfig::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.endpoint_.SetAllocated(endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endpoint_.IsDefault()) {
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.Endpoint)
}

// required string AccesKeyId = 14;
inline bool LogProducerConfig::_internal_has_acceskeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogProducerConfig::has_acceskeyid() const {
  return _internal_has_acceskeyid();
}
inline void LogProducerConfig::clear_acceskeyid() {
  _impl_.acceskeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogProducerConfig::acceskeyid() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.AccesKeyId)
  return _internal_acceskeyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogProducerConfig::set_acceskeyid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.acceskeyid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.AccesKeyId)
}
inline std::string* LogProducerConfig::mutable_acceskeyid() {
  std::string* _s = _internal_mutable_acceskeyid();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.AccesKeyId)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_acceskeyid() const {
  return _impl_.acceskeyid_.Get();
}
inline void LogProducerConfig::_internal_set_acceskeyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.acceskeyid_.Set(value, GetArenaForAllocation());
}
inline std::string* LogProducerConfig::_internal_mutable_acceskeyid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.acceskeyid_.Mutable(GetArenaForAllocation());
}
inline std::string* LogProducerConfig::release_acceskeyid() {
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.AccesKeyId)
  if (!_internal_has_acceskeyid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.acceskeyid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.acceskeyid_.IsDefault()) {
    _impl_.acceskeyid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogProducerConfig::set_allocated_acceskeyid(std::string* acceskeyid) {
  if (acceskeyid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.acceskeyid_.SetAllocated(acceskeyid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.acceskeyid_.IsDefault()) {
    _impl_.acceskeyid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.AccesKeyId)
}

// required string AccessKeySecret = 15;
inline bool LogProducerConfig::_internal_has_accesskeysecret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogProducerConfig::has_accesskeysecret() const {
  return _internal_has_accesskeysecret();
}
inline void LogProducerConfig::clear_accesskeysecret() {
  _impl_.accesskeysecret_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LogProducerConfig::accesskeysecret() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.AccessKeySecret)
  return _internal_accesskeysecret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogProducerConfig::set_accesskeysecret(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.accesskeysecret_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.AccessKeySecret)
}
inline std::string* LogProducerConfig::mutable_accesskeysecret() {
  std::string* _s = _internal_mutable_accesskeysecret();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.AccessKeySecret)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_accesskeysecret() const {
  return _impl_.accesskeysecret_.Get();
}
inline void LogProducerConfig::_internal_set_accesskeysecret(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.accesskeysecret_.Set(value, GetArenaForAllocation());
}
inline std::string* LogProducerConfig::_internal_mutable_accesskeysecret() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.accesskeysecret_.Mutable(GetArenaForAllocation());
}
inline std::string* LogProducerConfig::release_accesskeysecret() {
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.AccessKeySecret)
  if (!_internal_has_accesskeysecret()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.accesskeysecret_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesskeysecret_.IsDefault()) {
    _impl_.accesskeysecret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LogProducerConfig::set_allocated_accesskeysecret(std::string* accesskeysecret) {
  if (accesskeysecret != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.accesskeysecret_.SetAllocated(accesskeysecret, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesskeysecret_.IsDefault()) {
    _impl_.accesskeysecret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.AccessKeySecret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace cls_config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logproducerconfig_2eproto
